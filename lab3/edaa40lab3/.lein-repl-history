(use 'edaa40.lab3 :reload)
def board [1 2 3]
board
def b '[1 2 3]
b
def 1 b
(def bo [1 2 3])
bo
(bo 1)
(bo 0)
(use 'edaa40.lab3 :reload)
bo
(count bo)
bo
(list bo)
(map bo)
(map (list bo)
)
(def xo ['X '_ 'X '_ '_ '_ '_ '_ 'O ])
xo
(filter even? xo)
(filter even?)
(filter even? (range 4)
xo=
)
(filter even? (range 4)
xo)
xo
(filter even? (range 10))
(filter even? xo)
(filter even? (xo))
(filter even? bo)
bo
(map xo)
(map assoc xo)
(map assoc xo 1 2)
(map assoc xo 1)
(use 'edaa40.lab3 :reload)
(1 inc)
(empty? 1)
(map 1)
xo
(reduce [1 2 3 4 5])
(reduce + [1 2 3 4 5])
(reduce * [1 2 3 4 5])
(inc(reduce + [1 2 3 4 5]))
(inc(reduce + [1 2]))
(inc(reduce + [1 3]))
(inc(reduce + [1 1]))
(inc(reduce + [1 1 1]))
(use 'edaa40.lab3 :reload)
(map [1 2 3])
(use 'edaa40.lab3 :reload)
