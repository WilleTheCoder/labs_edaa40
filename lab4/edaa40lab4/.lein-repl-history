(use 'edaa40.lab4 :reload)
(use edaa40.lab4 :reload)
(use edaa40lab4 :reload)
(use 'edaa40.lab4 :reload)
(def h [1 2 3])
h
(disj h 2)
(set h)
(disj set(h) 2)
(disj (set(h) 2))
(disj h)
(disj h 2)
(disj h2)
(disj (h)2)
(disj (h) 2)
(disj( (h) 2))
(disj #{1 2 3} 2)
(disj h 2)
(disj #h 2)
(use 'edaa40.lab4 :reload)
( '() )
'()
h
(empty? h)
(empty? h)(str "hello")
(empty? h)(str "hello")(str "wat")
((empty? h) )
(empty? h)
(empty? h)()
(empty? h)(1)
(empty? h)('1)
(empty? h)'(1)
(if(empty? h)
(str "ye")
(str "na)
)
(if(empty? h) '(1))
(def x #{})
x
(if(empty? x) '(1))
(if(empty? x) '(1) '(2))
(if(empty? h) '(1) '(2))
(use 'edaa40.lab4 :reload)
h
x
(h + x)
(+ h x)
(map inc h)
(map + 1 h)
(map + 1 [2 3)
(map + 1 [2 3])
(map inc 1)
(map inc h)
(map + inc h)
(map + [1 2] [2 3])
(def Moves #{ [1 2] [2 1] [2 -1] [1 -2] [-1 -2] [-2 -1] [-2 1] [-1 2] })
def M #{ [1 2] [2 1] [2 -1] [1 -2] [-1 -2] [-2 -1] [-2 1] [-1 2] }
M
(def M #{ [1 2] [2 1] [2 -1] [1 -2] [-1 -2] [-2 -1] [-2 1] [-1 2] })
M
(def b (set (for [a (range 0 3) b (range 0 3)] [a b]))
)
b
(intersection b M)
(map + [3 3] [1 2])
(use 'edaa40.lab4 :reload)
